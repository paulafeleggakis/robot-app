require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe RobotsController do

  # This should return the minimal set of attributes required to create a valid
  # Robot. As you add validations to Robot, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { { "x_coordinate" => 0 } }
  #
  # # This should return the minimal set of values that should be in the session
  # # in order to pass any filters (e.g. authentication) defined in
  # # RobotsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Robot" do
        expect {
          post :create, {:robot => valid_attributes}, valid_session
        }.to change(Robot, :count).by(1)
      end

      it "assigns a newly created robot as @robot" do
        post :create, {:robot => valid_attributes}, valid_session
        expect(assigns(:robot)).to be_a(Robot)
        expect(assigns(:robot)).to be_persisted
      end

    end
  end


  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested robot" do
        robot = Robot.create! valid_attributes
        # Assuming there are no other robots in the database, this
        # specifies that the Robot created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Robot.any_instance.should_receive(:update).with({ "x_coordinate" => 2 })
        put :update, {:id => robot.to_param, :robot => { "x_coordinate" => 2 }}, valid_session
      end

      it "assigns the requested robot as @robot" do
        robot = Robot.create! valid_attributes
        put :update, {:id => robot.to_param, :robot => valid_attributes}, valid_session
        assigns(:robot).should eq(robot)
      end

      it "redirects to the robot" do
        robot = Robot.create! valid_attributes
        put :update, {:id => robot.to_param, :robot => valid_attributes}, valid_session
        response.should redirect_to(robot)
      end
    end
  end


end
